#!/usr/bin/perl -wT
#
# check_mem_linux - nagios plugin
#
# Copyright (c) 2014 Denis Sacchet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use Getopt::Long;
use vars qw($opt_V $opt_h $opt_m $opt_s $opt_C $PROGNAME);
use lib "/usr/lib/nagios/plugins" ;
use utils qw(%ERRORS);

use POSIX;

$PROGNAME = "check_mem_linux";

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';

sub print_usage () {
	print "Usage: $PROGNAME [-C|--cached-as-free] [-m|--memory <thresholds>] [-s|--swap <thresholds>]\n";
}

sub print_help () {
	print "Copyright (c) 2014 Denis Sacchet

This plugin reports the memory/swap usage

";
	print_usage();
	print "
-C, --cached-as-free
If this option is passed, then we add the amount of cached memory to the
amount of free memory

-u|-f, --used|--free
If -u|--used is specified, thresholds are trigger againt used memory,
else if -f|--free, thresholds are trigger againt used memory

-m|--memory [u|f].[lt|gt].INTEGER.<unit>,[u|f].[lt|gt].INTEGER.<unit>
Check memory usage and report WARNING if <free|used> value is above the first
specified INTEGER, and CRITICAL above the second INTEGER. You must specify the
unit

-s|--swap [u|f].[lt|gt].INTEGER.<unit>,[u|f].[lt|gt].INTEGER.<unit>
Check swap usage and report WARNING if <free|used> value is above the first
specified INTEGER, and CRITICAL above the second INTEGER. You must specify the
unit

<unit> can be :
- pct for a percent of total memory
- KB for KiloBytes
- MB for MegaBytes
- GT for GigaBytes

Example :
$PROGNAME -m f.lt.10.pct,u.gt.95.pct -s u.gt.0.KB,f.lt.5.pct

We will have a warning if
 - free memory is below 10% of total memory
 - or swap usage is more than 0

We will have a critical if
 - memory usage is above 95% of total memory
 - free swap is less than 5% of total swap

";
}

Getopt::Long::Configure('bundling');
GetOptions
	("h"   => \$opt_h, "help"       => \$opt_h,
	"m=s" => \$opt_m, "memory=s"  => \$opt_m,
	"C" => \$opt_C, "cached-as-free"  => \$opt_C,
	"s=s" => \$opt_s, "swap=s" => \$opt_s);

if ($opt_h) {print_help(); exit $ERRORS{'OK'};}

my %memory_thresholds;
my %swap_thresholds;

if(! $opt_m && ! $opt_s) {
	print("UNKNOWN: You must specify either one or both of warning and critical threshold\n");
	exit $ERRORS{'UNKNOWN'};
}

if($opt_m) {
	if($opt_m =~ /^([uf])\.(lt|gt)\.([0-9]+)\.(pct|KB|MB|GB),([uf])\.(lt|gt)\.([0-9]+)\.(pct|KB|MB|GB)$/) {
		$memory_thresholds{warning}{type}=$1;
		$memory_thresholds{warning}{way}=$2;
		$memory_thresholds{warning}{raw_value}=$3;
		$memory_thresholds{warning}{raw_unit}=$4;
		$memory_thresholds{critical}{type}=$5;
		$memory_thresholds{critical}{way}=$6;
		$memory_thresholds{critical}{raw_value}=$7;
		$memory_thresholds{critical}{raw_unit}=$8;
	} else {
		print("UNKNOWN: Invalid memory threshold: $opt_m\n");
		exit $ERRORS{'UNKNOWN'};
	}
}

if($opt_s) {
	if($opt_s =~ /^([uf])\.(lt|gt)\.([0-9]+)\.(pct|KB|MB|GB),([uf])\.(lt|gt)\.([0-9]+)\.(pct|KB|MB|GB)$/) {
		$swap_thresholds{warning}{type}=$1;
		$swap_thresholds{warning}{way}=$2;
		$swap_thresholds{warning}{raw_value}=$3;
		$swap_thresholds{warning}{raw_unit}=$4;
		$swap_thresholds{critical}{type}=$5;
		$swap_thresholds{critical}{way}=$6;
		$swap_thresholds{critical}{raw_value}=$7;
		$swap_thresholds{critical}{raw_unit}=$8;
	} else {
		print("UNKNOWN: Invalid swap threshold: $opt_s\n");
		exit $ERRORS{'UNKNOWN'};
	}
}

if( ! open (FILE, '/proc/version') ) {
	print("UNKNOWN: Unable to open /proc/version\n");
	exit $ERRORS{'UNKNOWN'};
}
my $linux;
$linux=<FILE>;
if(! $linux=~/^Linux .*/) {
	print("UNKNOWN: This plugin can only be used on a Linux system\n");
	exit $ERRORS{'UNKNOWN'};
}

close FILE;

if( ! open (FILE, "/proc/meminfo") ) {
	print("UNKNOWN: Unable to open /proc/meminfo\n");
	exit $ERRORS{'UNKNOWN'};
}
my %values;
while (<FILE>) {
	if(/^([^:]*): +([0-9]+).*/) {
		$values{$1} = $2;
	}
}

close FILE;

my $multiplier;
my $status='OK';
my $memory_total;
my $memory_free;
my $memory_used;
my $memory_current_value;
my $memory_message;
my $memory_perfdata;
my $swap_total;
my $swap_free;
my $swap_used;
my $swap_current_value;
my $swap_message;
my $swap_perfdata;

if($opt_m) {
	$memory_total=$values{MemTotal};
	$memory_free=$values{MemFree};
    if($opt_C) {
           $memory_free+=$values{Cached};
    }
	$memory_used=$values{MemTotal}-$values{MemFree};
	$memory_message="Memory usage is ok";

	if($memory_thresholds{warning}{raw_unit} eq 'pct') {
		$memory_thresholds{warning}{final_value}=$memory_thresholds{warning}{raw_value}*$memory_total/100;
	} else {
		$multiplier=1;
		if($memory_thresholds{warning}{raw_unit} eq 'MB') {
			$multiplier=1024;
		} elsif($memory_thresholds{warning}{raw_unit} eq 'GB') {
			$multiplier=1024*1024;
		}
		$memory_thresholds{warning}{final_value}=$memory_thresholds{warning}{raw_value}*$multiplier;
	}

	if($memory_thresholds{warning}{type} eq 'f') {
		$memory_current_value=$memory_free;
	} else {
		$memory_current_value=$memory_used;
	}
	if($memory_thresholds{warning}{way} eq 'lt') {
		if($memory_current_value < $memory_thresholds{warning}{final_value}) {
			$status="WARNING";
			$memory_message="Memory usage is warning"
		}
	} else {
		if($memory_current_value > $memory_thresholds{warning}{final_value}) {
			$status="WARNING";
			$memory_message="Memory usage is warning"
		}
	}

	if($memory_thresholds{critical}{raw_unit} eq 'pct') {
		$memory_thresholds{critical}{final_value}=$memory_thresholds{critical}{raw_value}*$memory_total/100;
	} else {
		$multiplier=1;
		if($memory_thresholds{critical}{raw_unit} eq 'MB') {
			$multiplier=1024;
		} elsif($memory_thresholds{critical}{raw_unit} eq 'GB') {
			$multiplier=1024*1024;
		}
		$memory_thresholds{critical}{final_value}=$memory_thresholds{critical}{raw_value}*$multiplier;
	}

	if($memory_thresholds{critical}{type} eq 'f') {
		$memory_current_value=$memory_free;
	} else {
		$memory_current_value=$memory_used;
	}
	if($memory_thresholds{critical}{way} eq 'lt') {
		if($memory_current_value < $memory_thresholds{critical}{final_value}) {
			$status="CRITICAL";
			$memory_message="Memory usage is critical"
		}
	} else {
		if($memory_current_value > $memory_thresholds{critical}{final_value}) {
			$status="CRITICAL";
			$memory_message="Memory usage is critical"
		}
	}

    $memory_perfdata = sprintf("mem_free=%dk;%d;%d;0;%d buffers=%dk cached=%dk",$values{MemFree},$memory_thresholds{warning}{final_value},$memory_thresholds{critical}{final_value},$values{MemTotal},$values{Buffers},$values{Cached});


}

if($opt_s) {
	$swap_total=$values{SwapTotal};
	$swap_free=$values{SwapFree};
	$swap_used=$swap_total-$swap_free;
    $swap_message="Swap usage is ok";

	if($swap_thresholds{warning}{raw_unit} eq 'pct') {
		$swap_thresholds{warning}{final_value}=$swap_thresholds{warning}{raw_value}*$swap_total/100;
	} else {
		$multiplier=1;
		if($swap_thresholds{warning}{raw_unit} eq 'MB') {
			$multiplier=1024;
		} elsif($swap_thresholds{warning}{raw_unit} eq 'GB') {
			$multiplier=1024*1024;
		}
		$swap_thresholds{warning}{final_value}=$swap_thresholds{warning}{raw_value}*$multiplier;
	}
	if($swap_thresholds{warning}{type} eq 'f') {
		$swap_current_value=$swap_free;
	} else {
		$swap_current_value=$swap_used;
	}
	if($swap_thresholds{warning}{way} eq 'lt') {
		if($swap_current_value < $swap_thresholds{warning}{final_value}) {
			$status="WARNING";
			$swap_message="Swap usage is warning"
		}
	} else {
		if($swap_current_value > $swap_thresholds{warning}{final_value}) {
			$status="WARNING";
			$swap_message="Swap usage is warning"
		}
	}


	if($swap_thresholds{critical}{raw_unit} eq 'pct') {
		$swap_thresholds{critical}{final_value}=$swap_thresholds{critical}{raw_value}*$swap_total/100;
	} else {
		$multiplier=1;
		if($swap_thresholds{critical}{raw_unit} eq 'MB') {
			$multiplier=1024;
		} elsif($swap_thresholds{critical}{raw_unit} eq 'GB') {
			$multiplier=1024*1024;
		}
		$swap_thresholds{critical}{final_value}=$swap_thresholds{critical}{raw_value}*$multiplier;
	}
	if($swap_thresholds{critical}{type} eq 'f') {
		$swap_current_value=$swap_free;
	} else {
		$swap_current_value=$swap_used;
	}
	if($swap_thresholds{critical}{way} eq 'lt') {
		if($swap_current_value < $swap_thresholds{critical}{final_value}) {
			$status="CRITICAL";
			$swap_message="Swap usage is critical"
		}
	} else {
		if($swap_current_value > $swap_thresholds{critical}{final_value}) {
			$status="CRITICAL";
			$swap_message="Swap usage is critical"
		}
	}

    $swap_perfdata = sprintf("swap_free=%dk;%d;%d;0;%d",$values{SwapFree},$swap_thresholds{warning}{final_value},$swap_thresholds{critical}{final_value},$values{SwapTotal});
}

if($opt_s && $opt_m) {
    print "$status: $memory_message, $swap_message | $memory_perfdata $swap_perfdata\n";
} elsif($opt_s) {
    print "$status: $swap_message | $swap_perfdata\n";
} else {
    print "$status: $memory_message | $memory_perfdata\n";
}
exit $ERRORS{$status};
