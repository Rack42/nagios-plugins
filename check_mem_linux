#!/usr/bin/perl -wT
#
# check_mem_linux - nagios plugin
#
# Copyright (c) 2014 Denis Sacchet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use Getopt::Long;
use vars qw($opt_V $opt_h $opt_m $opt_s $PROGNAME);
use lib "/usr/lib/nagios/plugins" ;
use utils qw(%ERRORS);
use Data::Dump qw(dump);


use POSIX;

$PROGNAME = "check_mem_linux";

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';

sub print_usage () {
	print "Usage: $PROGNAME [-m|--memory <thresholds>] [-s|--swap <thresholds>]\n";
}

sub print_help () {
	print "Copyright (c) 2014 Denis Sacchet

This plugin reports the memory/swap usage

";
	print_usage();
	print "
-u|-f, --used|--free
If -u|--used is specified, thresholds are trigger againt used memory,
else if -f|--free, thresholds are trigger againt used memory

-m|--memory [u|f][<|>]INTEGER<unit>,[u|f][<|>]INTEGER<unit>
Check memory usage and report WARNING if <free|used> value is above the first
specified INTEGER, and CRITICAL above the second INTEGER. You must specify the
unit

-s|--swap [u|f][<|>]INTEGER<unit>,[u|f][<|>]INTEGER<unit>
Check swap usage and report WARNING if <free|used> value is above the first
specified INTEGER, and CRITICAL above the second INTEGER. You must specify the
unit

<unit> can be :
- % for a percent of total memory
- k for KiloBytes
- m for MegaBytes
- g for GigaBytes

Example :
$PROGNAME -m f<10%,u>95% -s u>0Kb,f<5%

We will have a warning if
 - free memory is below 10% of total memory
 - or swap usage is more than 0

We will have a critical if
 - memory usage is above 95% of total memory
 - free swap is less than 5% of total swap

";
}

Getopt::Long::Configure('bundling');
GetOptions
	("h"   => \$opt_h, "help"       => \$opt_h,
	"m=s" => \$opt_m, "memory=s"  => \$opt_m,
	"s=s" => \$opt_s, "swap=s" => \$opt_s);

if ($opt_h) {print_help(); exit $ERRORS{'OK'};}

my %memory_thresholds;
my %swap_thresholds;

if(! $opt_m && ! $opt_s) {
	print("UNKNOWN: You must specify either one or both of warning and critical threshold\n");
	exit $ERRORS{'UNKNOWN'};
}

if($opt_m) {
	if($opt_m =~ /^([uf])([<>])([0-9]+)([%kmg]),([uf])([<>])([0-9]+)([%kmg])$/) {
		$memory_thresholds{warning}{type}=$1;
		$memory_thresholds{warning}{way}=$2;
		$memory_thresholds{warning}{raw_value}=$3;
		$memory_thresholds{warning}{raw_unit}=$4;
		$memory_thresholds{critical}{type}=$5;
		$memory_thresholds{critical}{way}=$6;
		$memory_thresholds{critical}{raw_value}=$7;
		$memory_thresholds{critical}{raw_unit}=$8;
	} else {
		print("UNKNOWN: Invalid memory threshold: $opt_m\n");
		exit $ERRORS{'UNKNOWN'};
	}
}

if($opt_s) {
	if($opt_s =~ /^([uf])([<>])([0-9]+)([%kmg]),([uf])([<>])([0-9]+)([%kmg])$/) {
		$swap_thresholds{warning}{type}=$1;
		$swap_thresholds{warning}{way}=$2;
		$swap_thresholds{warning}{raw_value}=$3;
		$swap_thresholds{warning}{raw_unit}=$4;
		$swap_thresholds{critical}{type}=$5;
		$swap_thresholds{critical}{way}=$6;
		$swap_thresholds{critical}{raw_value}=$7;
		$swap_thresholds{critical}{raw_unit}=$8;
	} else {
		print("UNKNOWN: Invalid swap threshold: $opt_s\n");
		exit $ERRORS{'UNKNOWN'};
	}
}

if( ! open (FILE, '/proc/version') ) {
	print("UNKNOWN: Unable to open /proc/version\n");
	exit $ERRORS{'UNKNOWN'};
}
my $linux;
$linux=<FILE>;
if(! $linux=~/^Linux .*/) {
	print("UNKNOWN: This plugin can only be used on a Linux system\n");
	exit $ERRORS{'UNKNOWN'};
}

close FILE;

if( ! open (FILE, "/proc/meminfo") ) {
	print("UNKNOWN: Unable to open /proc/meminfo\n");
	exit $ERRORS{'UNKNOWN'};
}
my %values;
while (<FILE>) {
	if(/^([^:]*): +([0-9]+).*/) {
		$values{$1} = $2;
	}
}

close FILE;

my $multiplier;
my $status='OK';

if($opt_m) {
	my $memory_total=$values{MemTotal};
	my $memory_free=$values{MemFree};
	my $memory_used=$values{MemTotal}-$values{MemFree};
	my $current_value;
	my $memory_message="memory usage is ok";

	if($memory_thresholds{warning}{raw_unit} eq "%") {
		$memory_thresholds{warning}{final_value}=$memory_thresholds{warning}{raw_value}*$memory_total/100;
	} else {
		$multiplier=1;
		if($memory_thresholds{warning}{raw_unit} eq 'm') {
			$multiplier=1024;
		} elsif($memory_thresholds{warning}{raw_unit} eq 'g') {
			$multiplier=1024*1024;
		}
		$memory_thresholds{warning}{final_value}=$memory_thresholds{warning}{raw_value}*$multiplier;
	}

	if($memory_thresholds{warning}{type} eq "f") {
		$current_value=$memory_free;
	} else {
		$current_value=$memory_used;
	}
	if($memory_thresholds{warning}{way} eq "<") {
		if($current_value < $memory_thresholds{warning}{final_value}) {
			$status="WARNING";
			$memory_message="Memory usage is warning"
		}
	} else {
		if($current_value > $memory_thresholds{warning}{final_value}) {
			$status="WARNING";
			$memory_message="Memory usage is warning"
		}
	}

	if($memory_thresholds{critical}{raw_unit} eq "%") {
		$memory_thresholds{critical}{final_value}=$memory_thresholds{critical}{raw_value}*$memory_total/100;
	} else {
		$multiplier=1;
		if($memory_thresholds{critical}{raw_unit} eq 'm') {
			$multiplier=1024;
		} elsif($memory_thresholds{critical}{raw_unit} eq 'g') {
			$multiplier=1024*1024;
		}
		$memory_thresholds{critical}{final_value}=$memory_thresholds{critical}{raw_value}*$multiplier;
	}

	if($memory_thresholds{critical}{type} eq "f") {
		$current_value=$memory_free;
	} else {
		$current_value=$memory_used;
	}
	if($memory_thresholds{critical}{way} eq "<") {
		if($current_value < $memory_thresholds{critical}{final_value}) {
			$status="CRITICAL";
			$memory_message="Memory usage is critical"
		}
	} else {
		if($current_value > $memory_thresholds{critical}{final_value}) {
			$status="CRITICAL";
			$memory_message="Memory usage is critical"
		}
	}
	print "$status - $memory_message\n";
	print "memory total : $memory_total / memory free : $memory_free / memory used : $memory_used / current_value : $current_value / warning value : $memory_thresholds{warning}{final_value} / critical value : $memory_thresholds{critical}{final_value}\n";
}

if($opt_s) {
	my $swap_total=$values{SwapTotal};
	my $swap_free=$values{SwapFree};

	if($swap_thresholds{warning}{raw_unit} eq "%") {
		$swap_thresholds{warning}{final_value}=$swap_thresholds{warning}{raw_value}*$swap_total/100;
	} else {
		$multiplier=1;
		if($swap_thresholds{warning}{raw_unit} eq 'm') {
			$multiplier=1024;
		} elsif($swap_thresholds{warning}{raw_unit} eq 'g') {
			$multiplier=1024*1024;
		}
		$swap_thresholds{warning}{final_value}=$swap_thresholds{warning}{raw_value}*$multiplier;
	}

	if($swap_thresholds{critical}{raw_unit} eq "%") {
		$swap_thresholds{critical}{final_value}=$swap_thresholds{critical}{raw_value}*$swap_total/100;
	} else {
		$multiplier=1;
		if($swap_thresholds{critical}{raw_unit} eq 'm') {
			$multiplier=1024;
		} elsif($swap_thresholds{critical}{raw_unit} eq 'g') {
			$multiplier=1024*1024;
		}
		$swap_thresholds{critical}{final_value}=$swap_thresholds{critical}{raw_value}*$multiplier;
	}
	dump(%swap_thresholds);
}

#if( ! open (FILE, '/proc/sys/net/ipv4/netfilter/ip_mem_max') ) {
#	print "UNKNOWN: Unable to open '/proc/sys/net/ipv4/netfilter/ip_mem_max'\n";
#	exit $ERRORS{'UNKNOWN'};
#}
#my $maximum_count=<FILE>;
#if($maximum_count=~/^(\d+)/) {
#	$maximum_count=$1;
#} else {
#	print "UNKNOWN: '/proc/sys/net/ipv4/netfilter/ip_mem_max' doesn't contain an integer !!!!!\n";
#	exit $ERRORS{'UNKNOWN'};
#}
#close FILE;
#
#if ( ! open (FILE,'/proc/net/ip_mem') ) {
#        print "UNKNOWN: Unable to open '/proc/net/ip_mem'\n";
#        exit $ERRORS{'UNKNOWN'};
#}
#
#while (<FILE>) {};
#my $count = $.;
#close FILE;
#
#my $current_percent=100*$count/$maximum_count;
#
#my $warning_count=floor($warning*$maximum_count/100);
#my $critical_count=floor($critical*$maximum_count/100);
#
#my $status;
#my $message;
#my $stats = sprintf("(%d on %d / %0.2f%%)",$count,$maximum_count,$current_percent);
#my $perfdata = sprintf("mem_count=%d;%d;%d;0;%d mem_percentage=%0.2f%%;%d;%d",$count,$warning_count,$critical_count,$maximum_count,$current_percent,$warning,$critical);
#
#if($current_percent >= 0 && $current_percent < $warning) {
#	$status='OK';
#	$message="All is ok";
#} elsif ($current_percent >= $warning && $current_percent < $critical) {
#	$status='WARNING';
#	$message="The number of entries in mem is warning";
#} elsif ($current_percent >= $critical && $current_percent <= 100) {
#	$status='CRITICAL';
#	$message="The number of entries in mem is critical";
#} else {
#	$status='UNKNOWN';
#	$message='The percentage calculated is outside normal range';
#}
#
#print "$status: $message $stats | $perfdata\n";
#exit $ERRORS{$status};
